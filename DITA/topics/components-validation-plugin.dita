<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept
  PUBLIC "-//OASIS//DTD DITA Concept//EN" "http://docs.oasis-open.org/dita/v1.1/OS/dtd/concept.dtd">
<concept id="components-validation-plugin">
  <title>Components Validation Plugin Extension</title>
  <shortdesc>This type of <xref keyref="glossentry_plugin"><term>plugin</term></xref> allows you to
    customize the menus, toolbars, and other components by enabling or filtering them from the user
    interface.</shortdesc>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Plugin extensions<indexterm>Components Validation</indexterm></indexterm>
        <indexterm>Components Validation plugin extension</indexterm>
      </keywords>
    </metadata>
  </prolog>
  <conbody>
    <p>This <term>plugin</term> provides the following API:</p>
    <ul>
      <li>The interface <apiname>ComponentsValidatorPluginExtension</apiname> - There is one method
        that must be implemented:<ul>
          <li><apiname>getComponentsValidator()</apiname> - Returns a <xref
              href="https://www.oxygenxml.com/InstData/Editor/SDK/javadoc/ro/sync/exml/ComponentsValidator.html"
              format="html" scope="external"
              ><codeph>ro.sync.exml.ComponentsValidator</codeph></xref> implementation class used
            for validating the menus, toolbars, and their actions.</li>
        </ul></li>
      <li>The <apiname>ComponentsValidator</apiname> interface provides methods to filter various
        features from being added to the GUI of <ph
          keyref="product"/>:<ul>
          <li><apiname>validateMenuOrTaggedAction(String[] menuOrActionPath)</apiname> - Checks if a
            menu or a tag action from a menu is allowed and returns a <codeph>boolean</codeph>
            value. A tag is used to uniquely identifying an action. The <apiname>String[]</apiname>
            argument is the tag of the menu / action and the tags of its parent menus if any. </li>
          <li><apiname>validateToolbarTaggedAction(String[] toolbarOrAction)</apiname> - Checks if
            an action from a toolbar is allowed and returns a <i>boolean</i> value. The
              <apiname>String[]</apiname> argument is the tag of the action from a toolbar and the
            tag of its parent toolbar if any.</li>
          <li><apiname>validateComponent(String key)</apiname> - Checks if the given component is
            allowed and returns a <codeph>boolean</codeph> value. The <apiname>String</apiname>
            argument is the tag identifying the component. You can remove toolbars entirely using
            this callback.</li>
          <li><apiname>validateAccelAction(String category, String tag)</apiname> - Checks if the
            given accelerator action is allowed to appear in the GUI and returns a
              <codeph>boolean</codeph> value. An accelerator action can be uniquely identified so it
            will be removed both from toolbars or menus. The first argument represents the action
            category, the second is the tag of the action.</li>
          <li><apiname>validateContentType(String contentType)</apiname> - Checks if the given
            content type is allowed and returns a <codeph>boolean</codeph> value. The
              <apiname>String</apiname> argument represents the content type. You can instruct <ph
              keyref="product"/> to ignore content types such as <codeph>text / xsl</codeph> or
              <codeph>text / xquery</codeph>.</li>
          <li><apiname>validateOptionPane(String optionPaneKey)</apiname> - Checks if the given
            options page can be added in the preferences option tree and returns a
              <codeph>boolean</codeph> value. The <apiname>String</apiname> argument is the option
            pane key.</li>
          <li><apiname>validateOption(String optionKey)</apiname> - Checks if the given option can
            be added in the option page and returns a <codeph>boolean</codeph> value. The
              <apiname>String</apiname> argument is the option key. This method is mostly used for
            internal use and it is not called for each option in a preferences page.</li>
          <li><apiname>validateLibrary(String library)</apiname> - Checks if the given library is
            allowed to appear listed in the <uicontrol>About</uicontrol> dialog box and returns a
              <codeph>boolean</codeph> value. The <apiname>String</apiname> argument is the library.
            This method is mostly for internal use.</li>
          <li><apiname>validateNewEditorTemplate(EditorTemplate editorTemplate)</apiname> - Checks
            if the given template for a new editor is allowed and returns a <codeph>boolean</codeph>
            value. The <apiname>EditorTemplate</apiname> argument is the editor template. An
              <apiname>EditorTemplate</apiname> is used to create an editor for a given extension.
            You can thus filter what appears in the list of the <uicontrol>New</uicontrol> dialog
            box.</li>
          <li><apiname>isDebuggerperspectiveAllowed()</apiname> - Checks if the debugger <xref
              keyref="glossentry_perspective"><term>perspective</term></xref> is allowed and returns
            a <codeph>boolean</codeph> value.</li>
          <li><apiname>validateSHMarker(String marker)</apiname> - Checks if the given marker is
            allowed and returns a <codeph>boolean</codeph> value. The <apiname>String</apiname>
            argument represents the syntax highlight marker to be checked. If you decide to filter
            certain content types, you can also filter the syntax highlight options so that the
            content type is no longer present in the Preferences options tree.</li>
          <li><apiname>validateToolbarComposite(String toolbarCompositeTag)</apiname> - Checks if
            the toolbar composite is available. A toolbar composite is a toolbar component such as a
            drop-down menu.</li>
        </ul></li>
    </ul>
    <note type="tip">The best way to decide what to filter is to observe the values that <ph
        keyref="product"/> passes when
      these callbacks are called. You have to create an implementation for this interface that
      lists in the console all values received by each function. Then you can decide on the values
      to filter and act accordingly.</note>
  </conbody>
</concept>


