<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic PUBLIC "-//OASIS//DTD DITA Topic//EN" "topic.dtd">
<topic id="customizing_frameworks">
  <title>Customizing <ph keyref="webappProduct"/> Frameworks</title>
  <prolog>
    <metadata>
      <keywords>
        <indexterm>Oxygen XML Web Author Component<indexterm>Customize
          frameworks</indexterm></indexterm>
      </keywords>
    </metadata>
  </prolog>
  <body>
    <p>Custom <xref keyref="glossentry_framework"><term>frameworks</term></xref> that are designed
      for documentation purposes can be reused interchangeably between the <ph keyref="product"/>
      standalone distribution and the <ph keyref="webappProduct"/>. However, some fine-tuning might
      be necessary to maximize the editing experience for your content authors. The advantages of
      using a common <term>framework</term> include:<ul id="ul_rlf_yvy_1r">
        <li>Easier development and testing, since you can test most of the functionality in the
          standalone version of <ph keyref="product"/> using advanced tools such as the <xref
            href="author-css-inspector-view.dita#author-css-inspector-view"><uicontrol>CSS
              Inspector</uicontrol></xref>, <xref
            href="editing-css-stylesheets.dita#editing-css-stylesheets"><uicontrol>CSS
              Editor</uicontrol></xref>, or the <xref
            href="the-document-type-dialog.dita#the-document-type-dialog"><uicontrol>Document Type
              Association</uicontrol> customization dialog box</xref>.</li>
        <li>Uniform experience across multiple <ph keyref="product"/> distributions.</li>
        <li>Ability to reuse previously developed <term>frameworks</term>.</li>
        <li>Many of the customized items that are added to your <term>framework</term> in the <ph
            keyref="product"/> standalone distribution also carry over to <ph keyref="webappProduct"
          />. For example, items that are added to the list of proposals for the <xref
            keyref="glossentry_content-completion-assistant"><term>Content Completion
              Assistant</term></xref> will appear in both distributions.</li>
      </ul></p>
    <section id="developing_and_testing_a_framework_using_the_weba">
      <title>Developing and Testing a Framework Using the Oxygen XML Web Author Test Server
        Add-on</title>
      <p>The following procedures assumes that you have access to an <ph keyref="product"/>
        standalone installation. This is not a mandatory requirement, but rather a way to speed up
        the development process.</p>
      <p>
        <ol id="ol_g2c_pnz_1r">
          <li>Use the standalone installation of <ph keyref="product"/> to customize a specific
              <term>framework</term> for whatever type of documentation that you require.
            Modifications made to the <term>framework</term> are instantly visible in the standalone
            version of <ph keyref="product"/>, but if you want to preview them in the <ph
              keyref="webappProduct"/>, proceed to the next step.</li>
          <li><xref href="https://www.oxygenxml.com/oxygen_webapp_add_on.html" format="html"
              scope="external">Run the <ph keyref="webappProduct"/> Test Serve Add-on and test the
                <term>framework</term></xref>.<note>The changes that you make to your
                <term>framework</term> will not automatically be reflected in the <ph
                keyref="webappProduct"/> if it was already running. To see the results of changes,
              close the server using the <b>Close and stop server</b> button and start it again.
            </note></li>
        </ol>
      </p>
    </section>
    <section id="deploying_a_framework">
      <title>Deploying a Framework</title>
      <p>
        <ol id="ol_gnd_mmz_1r">
          <li>Copy your customized <term>framework</term> into the
              <filepath>bundle-frameworks/oxygen-frameworks/</filepath> folder of the <xref
              href="https://www.oxygenxml.com/oxygen_sdk_maven.html" format="html" scope="external"
              >Oxygen XML SDK project</xref>.</li>
          <li><xref href="https://www.oxygenxml.com/oxygen_webapp_running_and_testing.html"
              format="html" scope="external">Build the SDK project and deploy it</xref>.</li>
        </ol>
      </p>
    </section>
    <section id="customization_tips">
      <title>Customization Tips</title>
      <p>
        <ul id="ol_css_3h1_br">
          <li>If you want to use CSS rules that only apply when the <term>framework</term> is used
            in the <ph keyref="webappProduct"/>, use the following <codeph>media</codeph>
            query:<codeblock outputclass="language-css">@media oxygen AND (platform:webapp) {
 ... 
}</codeblock></li>
          <li>In the <filepath>web</filepath> folder of each <term>framework</term>, you can add a
              <filepath>framework.js</filepath> file that calls the <xref
              href="customizing_js.dita#customizing_js">JavaScript API</xref> to implement custom
            editing actions. The possible use cases include the following:<ul>
              <li>Create custom actions and add them to the toolbar or contextual menu. For more
                details, see the <xref keyref="jscript_api_customaction">JS custom action
                  tutorial</xref>.</li>
              <li>Create custom form controls. For more details, see the <xref
                  keyref="jscript_api_formcontrol">JS form control tutorial</xref>.</li>
              <li>Add more views. For more details, see the <xref keyref="jscript_api_customview">JS
                  custom view tutorial</xref>.</li>
            </ul></li>
          <li>If the <term>framework</term> contains <uicontrol>Author</uicontrol> mode operations
            (Java implementations of the
              <codeph>ro.sync.ecss.extensions.api.AuthorOperation</codeph> interface), they can be
            enabled to be used by the <ph keyref="webappProduct"/> using the
              <codeph>ro.sync.ecss.extensions.api.WebappCompatible</codeph>
                annotation.<note><uicontrol>Author</uicontrol> mode operations that use <term>Java
                Swing</term> components to display a graphical interface are not compatible with the
                <ph keyref="webappProduct"/> and they should not be annotated.</note></li>
          <li>The <ph keyref="webappProduct"/> continuously validates the XML documents using the
            default validation scenarios defined at <term>framework</term> level. Only the
            validation units that have the <xref
              href="edit-validation-scenario.dita#edit-validation-scenario/validation-config-dialog"
                ><uicontrol>Automatic Validation</uicontrol> option selected in the <uicontrol>Edit
                Scenario</uicontrol> dialog box</xref> that is accessed by editing a scenario in the
              <xref href="document-type-validation-tab.dita#document-type-validation-tab"
                ><uicontrol>Validation</uicontrol> subtab</xref> when editing a document type.</li>
        </ul>
      </p>
    </section>
  </body>
</topic>
